plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id("androidx.navigation.safeargs")
    id("dagger.hilt.android.plugin")
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.pizzamax"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }


    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
    }
}


dependencies {
    //android components
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation "androidx.appcompat:appcompat:$rootProject.appCompatVersion"
    implementation "androidx.activity:activity-ktx:$rootProject.activityVersion"
    implementation 'androidx.navigation:navigation-fragment:2.4.2'
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintLayoutVersion"
    implementation "com.google.android.material:material:$rootProject.materialVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.lifecycleVersion"
    implementation 'androidx.fragment:fragment-ktx:1.4.1'


    // Testing
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.androidxJunitVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.coreTestingVersion"
    androidTestImplementation("androidx.test.espresso:espresso-core:$rootProject.espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })


    // Room components
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-rxjava2:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"


    // Kotlin coroutines components
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutines"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutines"

    //di with hilt
    implementation"com.google.dagger:hilt-android:2.42"
    kapt "com.google.dagger:hilt-compiler:2.42"
    testImplementation "com.google.dagger:hilt-android-testing:2.42"//local test
    kaptTest "com.google.dagger:hilt-compiler:2.42"
    androidTestImplementation "com.google.dagger:hilt-android-testing:2.42" // For instrumentation tests
    kaptAndroidTest "com.google.dagger:hilt-compiler:2.42"



    //glide, coil, gson and country picker
    implementation 'com.github.inpossoft:CountryCodePickerProject:2.0.0'
    implementation("com.github.bumptech.glide:glide:4.13.2")
    implementation("io.coil-kt:coil:2.1.0")
    implementation 'com.google.code.gson:gson:2.9.0'

    //Slider
    implementation 'com.github.smarteist:Android-Image-Slider:1.4.0'
    implementation 'com.github.Fuadafdhal:Auto-Image-Slider:1.0'

}

kapt {
    correctErrorTypes true
}

hilt {
    /**This allows the Hilt annotation processors to be isolating
     * so they are only invoked when necessary*/
    enableAggregatingTask = true

    /**
     * The Hilt Gradle plugin also offers an experimental option for configuring the compile classpath for annotation processing
     * such that Hilt and Dagger are able to traverse and inspect classes across all transitive dependencies from within the application Gradle module.
     * We recommend enabling this option because without it, an implementation dependency may drop important information about
     * @InstallIn modules or @EntryPoint interfaces from the compile classpath.
     * */
    enableExperimentalClasspathAggregation = true
}